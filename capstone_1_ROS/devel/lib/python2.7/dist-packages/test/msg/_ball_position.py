# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from test/ball_position.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ball_position(genpy.Message):
  _md5sum = "7ed3388ded1c7beb3973353beb402376"
  _type = "test/ball_position"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header




int32 size1
float32 img_x1
float32 img_y1
float32 distance1




int32 size2
float32 img_x2
float32 img_y2
float32 distance2



int32 size3
float32 img_x3
float32 img_y3
float32 distance3



int32 size4
float32 img_x4
float32 img_y4
float32 midpoint
float32 distance4







================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','size1','img_x1','img_y1','distance1','size2','img_x2','img_y2','distance2','size3','img_x3','img_y3','distance3','size4','img_x4','img_y4','midpoint','distance4']
  _slot_types = ['std_msgs/Header','int32','float32','float32','float32','int32','float32','float32','float32','int32','float32','float32','float32','int32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,size1,img_x1,img_y1,distance1,size2,img_x2,img_y2,distance2,size3,img_x3,img_y3,distance3,size4,img_x4,img_y4,midpoint,distance4

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ball_position, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.size1 is None:
        self.size1 = 0
      if self.img_x1 is None:
        self.img_x1 = 0.
      if self.img_y1 is None:
        self.img_y1 = 0.
      if self.distance1 is None:
        self.distance1 = 0.
      if self.size2 is None:
        self.size2 = 0
      if self.img_x2 is None:
        self.img_x2 = 0.
      if self.img_y2 is None:
        self.img_y2 = 0.
      if self.distance2 is None:
        self.distance2 = 0.
      if self.size3 is None:
        self.size3 = 0
      if self.img_x3 is None:
        self.img_x3 = 0.
      if self.img_y3 is None:
        self.img_y3 = 0.
      if self.distance3 is None:
        self.distance3 = 0.
      if self.size4 is None:
        self.size4 = 0
      if self.img_x4 is None:
        self.img_x4 = 0.
      if self.img_y4 is None:
        self.img_y4 = 0.
      if self.midpoint is None:
        self.midpoint = 0.
      if self.distance4 is None:
        self.distance4 = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.size1 = 0
      self.img_x1 = 0.
      self.img_y1 = 0.
      self.distance1 = 0.
      self.size2 = 0
      self.img_x2 = 0.
      self.img_y2 = 0.
      self.distance2 = 0.
      self.size3 = 0
      self.img_x3 = 0.
      self.img_y3 = 0.
      self.distance3 = 0.
      self.size4 = 0
      self.img_x4 = 0.
      self.img_y4 = 0.
      self.midpoint = 0.
      self.distance4 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i3fi3fi3fi4f().pack(_x.size1, _x.img_x1, _x.img_y1, _x.distance1, _x.size2, _x.img_x2, _x.img_y2, _x.distance2, _x.size3, _x.img_x3, _x.img_y3, _x.distance3, _x.size4, _x.img_x4, _x.img_y4, _x.midpoint, _x.distance4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.size1, _x.img_x1, _x.img_y1, _x.distance1, _x.size2, _x.img_x2, _x.img_y2, _x.distance2, _x.size3, _x.img_x3, _x.img_y3, _x.distance3, _x.size4, _x.img_x4, _x.img_y4, _x.midpoint, _x.distance4,) = _get_struct_i3fi3fi3fi4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i3fi3fi3fi4f().pack(_x.size1, _x.img_x1, _x.img_y1, _x.distance1, _x.size2, _x.img_x2, _x.img_y2, _x.distance2, _x.size3, _x.img_x3, _x.img_y3, _x.distance3, _x.size4, _x.img_x4, _x.img_y4, _x.midpoint, _x.distance4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.size1, _x.img_x1, _x.img_y1, _x.distance1, _x.size2, _x.img_x2, _x.img_y2, _x.distance2, _x.size3, _x.img_x3, _x.img_y3, _x.distance3, _x.size4, _x.img_x4, _x.img_y4, _x.midpoint, _x.distance4,) = _get_struct_i3fi3fi3fi4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_i3fi3fi3fi4f = None
def _get_struct_i3fi3fi3fi4f():
    global _struct_i3fi3fi3fi4f
    if _struct_i3fi3fi3fi4f is None:
        _struct_i3fi3fi3fi4f = struct.Struct("<i3fi3fi3fi4f")
    return _struct_i3fi3fi3fi4f
