// Generated by gencpp from file test/ball_position.msg
// DO NOT EDIT!


#ifndef TEST_MESSAGE_BALL_POSITION_H
#define TEST_MESSAGE_BALL_POSITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace test
{
template <class ContainerAllocator>
struct ball_position_
{
  typedef ball_position_<ContainerAllocator> Type;

  ball_position_()
    : header()
    , size1(0)
    , img_x1(0.0)
    , img_y1(0.0)
    , distance1(0.0)
    , size2(0)
    , img_x2(0.0)
    , img_y2(0.0)
    , distance2(0.0)
    , size3(0)
    , img_x3(0.0)
    , img_y3(0.0)
    , distance3(0.0)
    , size4(0)
    , img_x4(0.0)
    , img_y4(0.0)
    , midpoint(0.0)
    , distance4(0.0)  {
    }
  ball_position_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , size1(0)
    , img_x1(0.0)
    , img_y1(0.0)
    , distance1(0.0)
    , size2(0)
    , img_x2(0.0)
    , img_y2(0.0)
    , distance2(0.0)
    , size3(0)
    , img_x3(0.0)
    , img_y3(0.0)
    , distance3(0.0)
    , size4(0)
    , img_x4(0.0)
    , img_y4(0.0)
    , midpoint(0.0)
    , distance4(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _size1_type;
  _size1_type size1;

   typedef float _img_x1_type;
  _img_x1_type img_x1;

   typedef float _img_y1_type;
  _img_y1_type img_y1;

   typedef float _distance1_type;
  _distance1_type distance1;

   typedef int32_t _size2_type;
  _size2_type size2;

   typedef float _img_x2_type;
  _img_x2_type img_x2;

   typedef float _img_y2_type;
  _img_y2_type img_y2;

   typedef float _distance2_type;
  _distance2_type distance2;

   typedef int32_t _size3_type;
  _size3_type size3;

   typedef float _img_x3_type;
  _img_x3_type img_x3;

   typedef float _img_y3_type;
  _img_y3_type img_y3;

   typedef float _distance3_type;
  _distance3_type distance3;

   typedef int32_t _size4_type;
  _size4_type size4;

   typedef float _img_x4_type;
  _img_x4_type img_x4;

   typedef float _img_y4_type;
  _img_y4_type img_y4;

   typedef float _midpoint_type;
  _midpoint_type midpoint;

   typedef float _distance4_type;
  _distance4_type distance4;





  typedef boost::shared_ptr< ::test::ball_position_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::test::ball_position_<ContainerAllocator> const> ConstPtr;

}; // struct ball_position_

typedef ::test::ball_position_<std::allocator<void> > ball_position;

typedef boost::shared_ptr< ::test::ball_position > ball_positionPtr;
typedef boost::shared_ptr< ::test::ball_position const> ball_positionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::test::ball_position_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::test::ball_position_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace test

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'test': ['/home/taewook/capstone_1_ROS/src/test/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::test::ball_position_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::test::ball_position_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test::ball_position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test::ball_position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test::ball_position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test::ball_position_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::test::ball_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7ed3388ded1c7beb3973353beb402376";
  }

  static const char* value(const ::test::ball_position_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7ed3388ded1c7bebULL;
  static const uint64_t static_value2 = 0x3973353beb402376ULL;
};

template<class ContainerAllocator>
struct DataType< ::test::ball_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "test/ball_position";
  }

  static const char* value(const ::test::ball_position_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::test::ball_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
\n\
\n\
\n\
int32 size1\n\
float32 img_x1\n\
float32 img_y1\n\
float32 distance1\n\
\n\
\n\
\n\
\n\
int32 size2\n\
float32 img_x2\n\
float32 img_y2\n\
float32 distance2\n\
\n\
\n\
\n\
int32 size3\n\
float32 img_x3\n\
float32 img_y3\n\
float32 distance3\n\
\n\
\n\
\n\
int32 size4\n\
float32 img_x4\n\
float32 img_y4\n\
float32 midpoint\n\
float32 distance4\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::test::ball_position_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::test::ball_position_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.size1);
      stream.next(m.img_x1);
      stream.next(m.img_y1);
      stream.next(m.distance1);
      stream.next(m.size2);
      stream.next(m.img_x2);
      stream.next(m.img_y2);
      stream.next(m.distance2);
      stream.next(m.size3);
      stream.next(m.img_x3);
      stream.next(m.img_y3);
      stream.next(m.distance3);
      stream.next(m.size4);
      stream.next(m.img_x4);
      stream.next(m.img_y4);
      stream.next(m.midpoint);
      stream.next(m.distance4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ball_position_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::test::ball_position_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::test::ball_position_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "size1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.size1);
    s << indent << "img_x1: ";
    Printer<float>::stream(s, indent + "  ", v.img_x1);
    s << indent << "img_y1: ";
    Printer<float>::stream(s, indent + "  ", v.img_y1);
    s << indent << "distance1: ";
    Printer<float>::stream(s, indent + "  ", v.distance1);
    s << indent << "size2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.size2);
    s << indent << "img_x2: ";
    Printer<float>::stream(s, indent + "  ", v.img_x2);
    s << indent << "img_y2: ";
    Printer<float>::stream(s, indent + "  ", v.img_y2);
    s << indent << "distance2: ";
    Printer<float>::stream(s, indent + "  ", v.distance2);
    s << indent << "size3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.size3);
    s << indent << "img_x3: ";
    Printer<float>::stream(s, indent + "  ", v.img_x3);
    s << indent << "img_y3: ";
    Printer<float>::stream(s, indent + "  ", v.img_y3);
    s << indent << "distance3: ";
    Printer<float>::stream(s, indent + "  ", v.distance3);
    s << indent << "size4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.size4);
    s << indent << "img_x4: ";
    Printer<float>::stream(s, indent + "  ", v.img_x4);
    s << indent << "img_y4: ";
    Printer<float>::stream(s, indent + "  ", v.img_y4);
    s << indent << "midpoint: ";
    Printer<float>::stream(s, indent + "  ", v.midpoint);
    s << indent << "distance4: ";
    Printer<float>::stream(s, indent + "  ", v.distance4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEST_MESSAGE_BALL_POSITION_H
