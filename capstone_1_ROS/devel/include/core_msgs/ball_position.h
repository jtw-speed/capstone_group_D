// Generated by gencpp from file core_msgs/ball_position.msg
// DO NOT EDIT!


#ifndef CORE_MSGS_MESSAGE_BALL_POSITION_H
#define CORE_MSGS_MESSAGE_BALL_POSITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace core_msgs
{
template <class ContainerAllocator>
struct ball_position_
{
  typedef ball_position_<ContainerAllocator> Type;

  ball_position_()
    : header()
    , r_size(0)
    , b_size(0)
    , g_size(0)
    , b_img_x()
    , b_img_y()
    , b_img_z()
    , r_img_x()
    , r_img_y()
    , r_img_z()
    , g_img_x()
    , g_img_y()
    , g_img_z()  {
    }
  ball_position_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , r_size(0)
    , b_size(0)
    , g_size(0)
    , b_img_x(_alloc)
    , b_img_y(_alloc)
    , b_img_z(_alloc)
    , r_img_x(_alloc)
    , r_img_y(_alloc)
    , r_img_z(_alloc)
    , g_img_x(_alloc)
    , g_img_y(_alloc)
    , g_img_z(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _r_size_type;
  _r_size_type r_size;

   typedef int32_t _b_size_type;
  _b_size_type b_size;

   typedef int32_t _g_size_type;
  _g_size_type g_size;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _b_img_x_type;
  _b_img_x_type b_img_x;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _b_img_y_type;
  _b_img_y_type b_img_y;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _b_img_z_type;
  _b_img_z_type b_img_z;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _r_img_x_type;
  _r_img_x_type r_img_x;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _r_img_y_type;
  _r_img_y_type r_img_y;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _r_img_z_type;
  _r_img_z_type r_img_z;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _g_img_x_type;
  _g_img_x_type g_img_x;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _g_img_y_type;
  _g_img_y_type g_img_y;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _g_img_z_type;
  _g_img_z_type g_img_z;





  typedef boost::shared_ptr< ::core_msgs::ball_position_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_msgs::ball_position_<ContainerAllocator> const> ConstPtr;

}; // struct ball_position_

typedef ::core_msgs::ball_position_<std::allocator<void> > ball_position;

typedef boost::shared_ptr< ::core_msgs::ball_position > ball_positionPtr;
typedef boost::shared_ptr< ::core_msgs::ball_position const> ball_positionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::core_msgs::ball_position_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::core_msgs::ball_position_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace core_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'core_msgs': ['/home/taewook/capstone_1_ROS/src/core_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::core_msgs::ball_position_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::core_msgs::ball_position_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::core_msgs::ball_position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::core_msgs::ball_position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::core_msgs::ball_position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::core_msgs::ball_position_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::core_msgs::ball_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aed016388a639bff17b1abc7071952eb";
  }

  static const char* value(const ::core_msgs::ball_position_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaed016388a639bffULL;
  static const uint64_t static_value2 = 0x17b1abc7071952ebULL;
};

template<class ContainerAllocator>
struct DataType< ::core_msgs::ball_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "core_msgs/ball_position";
  }

  static const char* value(const ::core_msgs::ball_position_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::core_msgs::ball_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
int32 r_size\n\
int32 b_size\n\
int32 g_size\n\
\n\
float32[] b_img_x\n\
float32[] b_img_y\n\
float32[] b_img_z\n\
\n\
float32[] r_img_x\n\
float32[] r_img_y\n\
float32[] r_img_z\n\
\n\
float32[] g_img_x\n\
float32[] g_img_y\n\
float32[] g_img_z\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::core_msgs::ball_position_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::core_msgs::ball_position_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.r_size);
      stream.next(m.b_size);
      stream.next(m.g_size);
      stream.next(m.b_img_x);
      stream.next(m.b_img_y);
      stream.next(m.b_img_z);
      stream.next(m.r_img_x);
      stream.next(m.r_img_y);
      stream.next(m.r_img_z);
      stream.next(m.g_img_x);
      stream.next(m.g_img_y);
      stream.next(m.g_img_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ball_position_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::core_msgs::ball_position_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::core_msgs::ball_position_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "r_size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r_size);
    s << indent << "b_size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.b_size);
    s << indent << "g_size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.g_size);
    s << indent << "b_img_x[]" << std::endl;
    for (size_t i = 0; i < v.b_img_x.size(); ++i)
    {
      s << indent << "  b_img_x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.b_img_x[i]);
    }
    s << indent << "b_img_y[]" << std::endl;
    for (size_t i = 0; i < v.b_img_y.size(); ++i)
    {
      s << indent << "  b_img_y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.b_img_y[i]);
    }
    s << indent << "b_img_z[]" << std::endl;
    for (size_t i = 0; i < v.b_img_z.size(); ++i)
    {
      s << indent << "  b_img_z[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.b_img_z[i]);
    }
    s << indent << "r_img_x[]" << std::endl;
    for (size_t i = 0; i < v.r_img_x.size(); ++i)
    {
      s << indent << "  r_img_x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.r_img_x[i]);
    }
    s << indent << "r_img_y[]" << std::endl;
    for (size_t i = 0; i < v.r_img_y.size(); ++i)
    {
      s << indent << "  r_img_y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.r_img_y[i]);
    }
    s << indent << "r_img_z[]" << std::endl;
    for (size_t i = 0; i < v.r_img_z.size(); ++i)
    {
      s << indent << "  r_img_z[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.r_img_z[i]);
    }
    s << indent << "g_img_x[]" << std::endl;
    for (size_t i = 0; i < v.g_img_x.size(); ++i)
    {
      s << indent << "  g_img_x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.g_img_x[i]);
    }
    s << indent << "g_img_y[]" << std::endl;
    for (size_t i = 0; i < v.g_img_y.size(); ++i)
    {
      s << indent << "  g_img_y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.g_img_y[i]);
    }
    s << indent << "g_img_z[]" << std::endl;
    for (size_t i = 0; i < v.g_img_z.size(); ++i)
    {
      s << indent << "  g_img_z[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.g_img_z[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CORE_MSGS_MESSAGE_BALL_POSITION_H
